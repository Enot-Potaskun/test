28.09.20.
Gulp Галп - для оптимизации задач
Установили свежую версию Node с https://nodejs.org/uk/ Установил v12.18.4 (как с видео-урока) потому что свежая не работала
На рабочем столе откр контекстное меню и там Git Bash Here
Проверка. node -v установилась-ли версия с сайта, node -npm (Node Pakage Manager) прога, что будет нам качать пакеты для Галп
Сначала установим Галп глобально, а потом локально оптимизируем в проект
В Bash-окне на рабочем столе пишем npm i gulp-cli -g   или   npm instal gulp-cli --global
npm init - создадаем файл манифеста в папке, где проект (назовем ее agalp), показывающий, какие пакеты будем ставить, нужные для работы 
Появятся вопросы - как хотите назвать сборку? назвали agalp
Куча вопросов, потом подтверждение и в папке agalp создался файл-манифест package.json. Нужен чтобы Gulp знал,
какие пакеты для работы ему необходимы
npm i gulp -D  или  npm i gulp --save-dev  - установим сам Gulp в папку agalp
В package.json добавилось  "devDependencies": "gulp": "^4.0.2" - версия
npm i gulp-sass node-sass -D  - установим два пакета для компилляции sass-кода в папке "agalp"

www.npmjs.com  - тут можно скачать версии модулей, если вдруг надо более раннюю версию: gulp-rigger@4.2.1

-D нужен для пакетов разработки, для пакетов зависимости не нужен. В gulpfile.js эти пакеты записаны отдельно.
Почему отдельно? Папка 'node_modules' (нужна только для работы Gulp и всех node-пакетов) разростается до больших 
размеров, ее за собой не потягаешь для других проектов. За собой таскать нужно только gulpfile.js и package.json.
Пример. Скачали эти два файла на другой комп. В папке с этими файлами Bash. И в нем   npm i   ждем, пока 
создастся папка 'node_modules' и в нее с инета поднятутся все необходимые пакеты. Если написать   npm i -production,
то не установятся пакеты зависимости разработки. 

Они добавятся в package.json и их версии "gulp-sass": "^5.1.0", "node-sass": "^7.0.3" 
mkdir app - make directory создадим папку "app" с рабочими файлами js css
touch gulpfile.js - создадим файл, контролирующий Gulp, для работы настроек. "gulpfile.js" название только такое и никак иначе
const { src, dest, watch } = require('gulp'); - импортируем в gulpfile.js сущности из самого Gulp
const sass = require('gulp-sass');  - в gulpfile.js импортируем пакеты из папки node_modules. У меня эта команда
оказалась не рабочей. Bash предложил const sass = require('gulp-sass')(require('sass')); - сработало
sass.compiler = require('node-sass');  - подключим в gulpfile.js node-компиллятор
function SASS(cb) {}  - создадим исполнительную функцию, отвечающую за компилляцию
В папке "app" надо создать хотя-бы один SASS-файл с рандомными стилями, чтобы компиллятор видел, что надо менять
cd app  - перешли в директорию папки "app"
mkdir sass - создали в "app" папку "sass". cd sass и перешли в нее
touch style.sass - создали sass-файл
npm i gulp-sourcemaps gulp-autoprefixer -D  - установим еще пару модулей (пакетов) в agalp
В package.json они добавились и их версии "gulp-autoprefixer": "^8.0.0", "gulp-sourcemaps": "^3.0.0",
Работа с pipe-методами
Не срабатывает. Bash предложил убрать в строке .pipe(autoprefixer(['last 15 version', '> 1%', 'ie7', 'ie8'])) 
'ie7', 'ie8'. Убрал. Вышло .pipe(autoprefixer(['last 15 version', '> 1%'])) - сработало
И, для срабатывания пришлось полностью установить SASS-модуль  - npm install sass
export - экспортируем все те методы, которые хотим отдавать
gulp --tasks  - проверим наличие методов в папке agalp, показазывает, что есть метод sass который можно выполнить
gulp sass  - компеллируем код. Создастся папка css с файлом style.css, скомпеллированным из файла style.sass

Еще важная ф-я, которую надо заменить - лайф-сервер. Переложим это тоже на Галп. Для этого установим еще один модуль
npm i browser-sync -D  и подключим его  const browserSync = require('browser-sync').create();  и под него 
делаем ф-ю liveReload
В папке app создать index.html
gulp --tasks  - проверим наличие watch. Есть в наличии
gulp watch  - запустится watch и терминал будет занят, писать в него ничего будет нелязя т.к. watch процесс постоянный.
При запуске watch запускается сервер, должна появляться плашка BrowserSync:connected. Откроется 
страница localhost:3000. Любые изменения в файлы, указанных нами типов (html, js), перезагружают страницу. 
Теперь при изменениях в gulpfile.js надо очищать содержимое Bash Ctrl+C и заново вводить gulp watch

watch не следит за изменениями sass-файлов, а надо чтобы следил.
Дополним ф-ю SASS, чтобы он не перезапускал страницу, как он это делает с html и js файлов. Сделаем стриминговый 
поток. Этот поток при изменении css-файлов меняет их внутри браузера не перезагружаяя страницу (чтоб скрипты не 
перезагружались) .pipe(browserSync.stream())

Начнем соединять файлы библиотек (минифицировать) 
npm i jquery @fancyapps/fancybox slick-carousel  - установим через терминал еще файлы для работы приложения
npm i gulp-concat gulp-concat-css gulp-cssnano gulp-uglifyjs -D  - пакет для соединения файлов и пара 
библиотек. Одна css-файлы минимизирует вторая js-файлы минимизирует  
gulp bundleCSS  - объеденение css-файлов в конечный libs.min.css
gulp bundleJS  - объеденение js-файлов в конечный libs.min.js
gulp bundleAll  - объединили функции выше, запустили и они выполняются параллельно, а не одна за одной, как выше

npm i -D gulp-rigger  - подключим модуль, соединяющий несколько файлов в один файл компонента и из него собирать
целостную картину, т.е. разделить на несколько шаблонов. Т.е. если в готовом многостроничном сайте надо что-то 
повторяющееся поменять, подправить, то удобно использ файл-риггер. Но его надо аккуратно использ, т.к. одним
неосторожным лишним пробелом в риггере валятся все модули
Создадим папку tpl, где будут шаблоны для риггера, в tpl будут файлы из которых будут делаться итоговые
image in   - модуль оптимизирующий изображение

optimizilla - хороший бесплатный сервис для качественного сжатия картинки
Если много картинок с однотипным названием, которое надо удалить (например убрать суффикс -min) проще написать для 
этого ф-ю. Для этого загрузим пару модулей. 

npm i -D gulp-rename gulp-clean  - optimizilla ужимает новые файлы с приставкой min - ren23.png => ren23-min.png. 
А если много картинок? Надо как-то избавится от префикса. Поэтому загрузим пару модулей gulp-rename gulp-clean. 
Запускаем gulp processImg






